/* Metrowerks Standard Library
 * Copyright C 1995-2001 Metrowerks Corporation.  All rights reserved.
 *
 * $Date: 2001/07/21 18:41:14 $
 * $Revision: 1.23.4.1 $
 */

#ifndef _MSL_CCTYPE
#define _MSL_CCTYPE

#include <ansi_parms.h>

#if __MACH__
#include <ctype.h>
#else

#include <eof.h>   /*- blc 990825 -*/

#ifndef RC_INVOKED /*- hh 971230 -*/

/*
 * Check if _INLINE is already defined
 * If so, use that definition. This allows
 * the symbol to exist and it to have an inline
 * if the user is using it.
 * sw 081601
 */
#ifndef _INLINE
#define _INLINE __inline
#endif

_MSL_BEGIN_EXTERN_C                                    /*- cc 010409 -*/

    extern _MSL_IMP_EXP_C unsigned char __ctype_map[]; /*- rjk 980313 -*/
extern _MSL_IMP_EXP_C unsigned char     __lower_map[]; /*- rjk 980313 -*/
extern _MSL_IMP_EXP_C unsigned char     __upper_map[]; /*- rjk 980313 -*/

_MSL_END_EXTERN_C                                      /*- cc 010409 -*/

#define __control_char 0x01
#define __motion_char  0x02
#define __space_char   0x04
#define __punctuation  0x08
#define __digit        0x10
#define __hex_digit    0x20
#define __lower_case   0x40
#define __upper_case   0x80

#define __letter       (__lower_case | __upper_case)
#define __alphanumeric (__letter | __digit)
#define __graphic      (__alphanumeric | __punctuation)
#define __printable    (__graphic | __space_char)
#define __whitespace   (__motion_char | __space_char)
#define __control      (__motion_char | __control_char)
#define __zero_fill(c) ((int)(unsigned char)(c))

    _MSL_BEGIN_NAMESPACE_STD                           /*- cc 010409 -*/

        _INLINE int
        isalnum (int c)
{
    return __ctype_map[__zero_fill (c)] & __alphanumeric;
}
_INLINE
int
isalpha (int c)
{
    return __ctype_map[__zero_fill (c)] & __letter;
}
_INLINE
int
iscntrl (int c)
{
    return __ctype_map[__zero_fill (c)] & __control;
}
_INLINE
int
isdigit (int c)
{
    return __ctype_map[__zero_fill (c)] & __digit;
}
_INLINE
int
isgraph (int c)
{
    return __ctype_map[__zero_fill (c)] & __graphic;
}
_INLINE
int
islower (int c)
{
    return __ctype_map[__zero_fill (c)] & __lower_case;
}
_INLINE
int
isprint (int c)
{
    return __ctype_map[__zero_fill (c)] & __printable;
}
_INLINE
int
ispunct (int c)
{
    return __ctype_map[__zero_fill (c)] & __punctuation;
}
_INLINE
int
isspace (int c)
{
    return __ctype_map[__zero_fill (c)] & __whitespace;
}
_INLINE
int
isupper (int c)
{
    return __ctype_map[__zero_fill (c)] & __upper_case;
}
_INLINE
int
isxdigit (int c)
{
    return __ctype_map[__zero_fill (c)] & __hex_digit;
}
_INLINE
int
tolower (int c)
{
    return ((c == EOF) ? EOF : ((int)__lower_map[__zero_fill (c)]));
} /*- mm 970918 -*/
_INLINE
int
toupper (int c)
{
    return ((c == EOF) ? EOF : ((int)__upper_map[__zero_fill (c)]));
} /*- mm 970918 -*/
_INLINE
int
iswblank (int c)
{
    return ((c == (int)L' ') || (c == (int)L'\t'));
} /*- mm 980626 -*/
_MSL_END_NAMESPACE_STD /*- cc 010409 -*/

#endif             /* RC_INVOKED */

#endif             /* __MACH__ */

#endif             /* _MSL_CCTYPE */

                   /* Change record:
                    * 961221 bkoz line 21-23 added extern keyword (mmoss)
                    * mm  970918 Change to ensure that toupper(EOF) and tolower(EOF) == EOF
                    * mm  970925 Deleted defines for toupper and tolower and inserted them into ctype.c
                    * hh  971206 Changed filename from ctype.h to cctype and added namespace support
                    * hh  971230 added RC_INVOKED wrapper
                    * rjk 980313 added _MSL_IMP_EXP_C
                    * mm  980626 added iswblank---see C9x 7.18.2.1.3
                    * mm  990730 Removed include of cstdio.
                    * blc 990825 added include of eof.h needed when included from C++ files
                    * cc  000320 added _MSL_IMP_EXP_C
                    * cc  020320 removed macros and changed inline to extern _INLINE
                    * JWW 001208 Added case for targeting Mach-O
                    */
