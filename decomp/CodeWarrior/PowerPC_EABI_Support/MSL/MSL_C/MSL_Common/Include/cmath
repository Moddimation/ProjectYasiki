/* Metrowerks Standard Library
 * Copyright C 1995-2001 Metrowerks Corporation.  All rights reserved.
 *
 * $Date: 2001/07/21 18:41:42 $
 * $Revision: 1.52.4.1 $
 */

/*
 *  --  Not intended for MacOS Platforms!  --
 *      See cmath.macos.h instead
 */

/*
 * Note:  This is a complete rewrite (Jan 1999).
 * It was created to be a portable cmath header for
 * all mwerks compilers/targets - except MacOS.
 * MacOS is unique in that it is currently the only
 * platform where metrowerks does not provide the math
 * portion of the C standard library. We simply hook into
 * the library provided by Apple as part of the macos.
 */

#ifndef _MSL_CMATH
#define _MSL_CMATH

#ifndef __cmath__
#define __cmath__ /* JWW - Keep the Apple Universal Interfaces happy */
#endif

/*
 * Define _INLINE to __inline so it can be overridden
 * by another .c file to create the symbols. For example,
 * see ctype.c. It overrides _INLINE to be declspec(weak)
 * so the symbols will also exist in the library. This
 * provides backwards compatibility in case a symbol
 * is changed from non inline to inline. A user library
 * may have a dependency on this, and would then fail
 * to link. This way the symbol will exist as well as
 * the inline version. This should not affect other
 * MSLs at this time.
 * sw 010918
 */

#ifndef _INLINE
#define _INLINE __inline
#endif

#ifndef _No_Floating_Point
#include <ansi_parms.h>

#ifdef __m56800__        /*- mm 981014 -*/
#include <m56800_math.h> /*- mm 981014 -*/
#endif                   /*- mm 981014 -*/
#ifdef __m56800E__       /*- ah 010121 -*/
#include <m56700_math.h>
#endif
/*- mm 981014 -*/
#if (__dest_os == __mac_os_x)
#include <cmath.mach.h>
#elif (__dest_os == __mac_os)
#include <cmath.macos.h>
#else

/*#pragma options align=native*/ /*- cc 010405 -*/

/*
 *	common macro definitions
 */

/*#define __STDC_IEC_559__ 1*/ /*- cc 010510 -*/

/* 	FLT_EVAL_METHOD represents the internal precision and range of
    operations using the float and double types.  For method 0,
    operations are performed just to the precision/range of the
    given floating point type.  For method 1, float and double
    operations are performed in double precision/range, and long
    double operations are performed in long double precision/range.
    For method 2, all floating operations are performed in long
    double precision/range.  Method -1 is indeterminable, which I take
    to mean inconsistent, given the specific code compiled. */
#if __INTEL__
#if __option(k63d) || (__option(sse) && !__option(sse2))
/* 	since double operations and some float operations are still
    performed in the long double precision/range, depending on the
    codegen, it's impossible to guarantee anything... */
#define FLT_EVAL_METHOD -1 /* indeterminable */ /*- ejs 010622 -*/
typedef float       float_t;
typedef long double double_t;
#else
#define FLT_EVAL_METHOD 2 /* all long double */ /*- cc 010124 -*/
#endif
#else
/* this should be adjusted for each target! */
#define FLT_EVAL_METHOD 0 /* same as type */    /*- ejs 010622 -*/
#endif

#define FP_NAN                                                                      \
    1 /*   quiet NaN (signaling Nan supported on MAC but nowhere else.              \
       */
#define FP_INFINITE  2                     /*   + or - infinity      */
#define FP_ZERO      3                     /*   + or - zero          */
#define FP_NORMAL    4                     /*   all normal numbers   */
#define FP_SUBNORMAL 5                     /*   denormal numbers     */

#define DECIMAL_DIG  17

#include <msl_t.h>

#if __option(little_endian)
#define __HI(x)  (sizeof(x) == 8 ? *(1 + (_INT32*)&x) : (*(_INT32*)&x))
#define __LO(x)  (*(_INT32*)&x)
#define __UHI(x) (sizeof(x) == 8 ? *(1 + (_UINT32*)&x) : (*(_UINT32*)&x))
#define __ULO(x) (*(_UINT32*)&x)
#else
#define __LO(x)  (sizeof(x) == 8 ? *(1 + (_INT32*)&x) : (*(_INT32*)&x))
#define __HI(x)  (*(_INT32*)&x)
#define __ULO(x) (sizeof(x) == 8 ? *(1 + (_UINT32*)&x) : (*(_UINT32*)&x))
#define __UHI(x) (*(_UINT32*)&x)
#endif
/* start out w/ definitions of inlines/macros which are neither extern "C" nor in
 * namespace std */

/* fpclassify for floats */

_INLINE int
__fpclassifyf(float x)
{
    switch ((*(_INT32*)&x) & 0x7f800000)
    {
        case 0x7f800000:
            {
                if ((*(_INT32*)&x) & 0x007fffff)
                {
                    return FP_NAN;
                }
                else
                {
                    return FP_INFINITE;
                }
                break;
            }
        case 0:
            {
                if ((*(_INT32*)&x) & 0x007fffff)
                {
                    return FP_SUBNORMAL;
                }
                else
                {
                    return FP_ZERO;
                }
                break;
            }
    }
    return FP_NORMAL;
}
/* fpclassify for doubles or integral types */

_INLINE int
__fpclassifyd(double x)
{
    switch (__HI(x) & 0x7ff00000)
    {
        case 0x7ff00000:
            {
                if ((__HI(x) & 0x000fffff) || (__LO(x) & 0xffffffff))
                {
                    return FP_NAN;
                }
                else
                {
                    return FP_INFINITE;
                }
                break;
            }
        case 0:
            {
                if ((__HI(x) & 0x000fffff) || (__LO(x) & 0xffffffff))
                {
                    return FP_SUBNORMAL;
                }
                else
                {
                    return FP_ZERO;
                }
                break;
            }
    }
    return FP_NORMAL;
}
#define signbit(x) ((int)(__HI(x) & 0x80000000))

/*
 * 7.7
 *
 * Defines
 */

#if (FLT_EVAL_METHOD == 0)

typedef float  float_t;
typedef double double_t;

#elif (FLT_EVAL_METHOD == 1)

typedef double float_t;
typedef double double_t;

#elif (FLT_EVAL_METHOD == 2)

typedef long double float_t;
typedef long double double_t;

#endif

/*  7.7.3  Classification macros */

#define fpclassify(x)                                                               \
    ((sizeof(x) == sizeof(float)) ? __fpclassifyf((float)(x))                       \
                                  : __fpclassifyd((double)(x)))

/*- cc 010409 -*/
/*
#ifdef __cplusplus
    extern "C" {
#endif
*/

_MSL_BEGIN_EXTERN_C /*- cc 010409 -*/

    _MSL_IMP_EXP _INT32 __float_huge[];
_MSL_IMP_EXP _INT32     __float_nan[];
_MSL_IMP_EXP _INT32     __double_huge[];
_MSL_IMP_EXP _INT32     __extended_huge[];

/*  special number macros */

#define HUGE_VAL    (*(double*)__double_huge)
#define INFINITY    (*(float*)__float_huge)
#define NAN         (*(float*)__float_nan)
#define HUGE_VALF   (*(float*)__float_huge)
#define HUGE_VALL   (*(long double*)__extended_huge)

/* macros map onto condtion codes of x86 fpu status word
  (it is more efficient to return the condition codes of the status word)
*/

_MSL_END_EXTERN_C /*- cc 010409 -*/

/*
#ifdef __cplusplus
    } /* end extern "C" *//*
#endif
*/	/*- cc 010409 -*/

#define isnormal(x) (fpclassify(x) == FP_NORMAL)
#define isnan(x)    (fpclassify(x) == FP_NAN)
#define isinf(x)    (fpclassify(x) == FP_INFINITE)
#define isfinite(x) ((fpclassify(x) > FP_INFINITE))

/* m.f.- removed signbit macro per the generalization of __HI macro */

#if __MIPS__
    float
    __s_abs(float x);
#if __MIPS_ISA2__ && __fpu__
float __s_sqrt(float x);
#endif
#endif

_MSL_BEGIN_NAMESPACE_STD /*- cc 010409 -*/

    float
      acosf(float x);
float asinf(float x);
float atanf(float x);
float atan2f(float y, float x);
float cosf(float x);
float sinf(float x);
float tanf(float x);

_MSL_END_NAMESPACE_STD

/* now stuff both extern "C" and in namespace std */

_MSL_BEGIN_NAMESPACE_STD /*- cc 010409 -*/
    _MSL_BEGIN_EXTERN_C  /*- cc 010409 -*/

                         /*
                          *	we have/will have portable versions of the 22 K&R math.h functions only
                          *  we may add C9X additions as necessary
                          *
                          */

    double
       pow(double, double);      /*- pmk 010404 -*/
double copysign(double, double); /*- pmk 010404 -*/
double exp(double);
double acos(double);
double asin(double);
double sin(double x);
double cos(double x);
double tan(double);
double cosh(double);
double sinh(double);
double tanh(double);
double atan(double x);
double atan2(double, double);
double fmod(double, double);
double fabs(double);
double sqrt(double);
double frexp(double, int* exp);
double ldexp(double, int exp);
double log(double);
double log10(double);
double modf(double, double* iptr);
double ceil(double);
double floor(double);
double log2(double);
double acosh(double);
double asinh(double);
double atanh(double);
double exp2(double);
double expm1(double);
double log1p(double);
double logb(double);
/* scalbn only differs from ldexp on non base 2 computers(i.e. nothing
 * we support--m.f. 02/05/99)
 */
_INLINE double
scalbn(double x, int n)
{
    return ldexp(x, n);
}
_INLINE double
scalbln(double x, long n)
{
    return ldexp(x, (int)n);
}
/* scalbln can be changed whenever sizeof(long) > sizeof(int)
 * however, since x*2^^INT_MAX=Inf, the additional range allowed by a larger long
 * adds nothing useful to this, not sure why C9X even has scalbln???
 */

double hypot(double, double);
#ifndef __INTEL__
double erf(double);
double erfc(double);
double gamma(double);
double lgamma(double);
double nextafter(double, double);
#endif

double nearbyint(double);
double rint(double);
long   rinttol(double);
double round(double);
long   roundtol(double);
double trunc(double);

double remainder(double, double);
double remquo(double, double, int* quo);
double fdim(double, double);
double fmax(double, double);
double fmin(double, double);

long int lrint(double);
long int lround(double);
#ifdef __MSL_LONGLONG_SUPPORT__            /*- mm 961219 -*/
long long llrint(double);
long long llround(double);
#endif /*__MSL_LONGLONG_SUPPORT__*/        /*- mm 961220 -*/

#if ((__dest_os == __mac_os) || __INTEL__) /*- mm 991216 -*/
double nan(const char*);         /*- mm 991216 -*/
#else                                      /*- mm 991216 -*/
#ifdef __cplusplus                         /*- hh 010411 -*/
inline double
nan(const char*)
{
    return NAN;
} /*- hh 010411 -*/
#else                                      /*- hh 010411 -*/
#define nan(x) NAN                         /*- mm 991216 -*/
#endif                                     /*- hh 010411 -*/
#endif                                     /*- mm 991216 -*/
_MSL_END_EXTERN_C                /*- cc 010409 -*/
    _MSL_END_NAMESPACE_STD       /*- cc 010409 -*/

        _MSL_BEGIN_NAMESPACE_STD /*- cc 010409 -*/

                                 /*
                                  * long double math functions(fool's), we do not support true long double
                                  * outside of macos 68K
                                  */

            _INLINE long double
            acosl(long double x)
{
    return acos((double_t)x);
}
_INLINE long double
asinl(long double x)
{
    return asin((double_t)x);
}
_INLINE long double
atanl(long double x)
{
    return atan((double_t)x);
}
_INLINE long double
atan2l(long double y, long double x)
{
    return atan2((double_t)y, (double_t)x);
}
_INLINE long double
cosl(long double x)
{
    return cos((double_t)x);
}
_INLINE long double
sinl(long double x)
{
    return sin((double_t)x);
}
_INLINE long double
tanl(long double x)
{
    return tan((double_t)x);
}
_INLINE long double
coshl(long double x)
{
    return cosh((double_t)x);
}
_INLINE long double
sinhl(long double x)
{
    return sinh((double_t)x);
}
_INLINE long double
tanhl(long double x)
{
    return tanh((double_t)x);
}
_INLINE long double
acoshl(long double x)
{
    return acosh((double_t)x);
}
_INLINE long double
asinhl(long double x)
{
    return asinh((double_t)x);
}
_INLINE long double
atanhl(long double x)
{
    return atanh((double_t)x);
}
_INLINE long double
expl(long double x)
{
    return exp((double_t)x);
}
_INLINE long double
frexpl(long double x, int* exp)
{
    return frexp((double_t)x, exp);
}
_INLINE long double
ldexpl(long double x, int exp)
{
    return ldexp((double_t)x, exp);
}
_INLINE long double
logl(long double x)
{
    return log((double_t)x);
}
_INLINE long double
log10l(long double x)
{
    return log10((double_t)x);
}
_INLINE long double
modfl(long double x, long double* iptr)
{
    double      iptrd;
    long double result = modf((double)x, &iptrd);
    *iptr = iptrd;
    return result;
}
_INLINE long double
exp2l(long double x)
{
    return exp2((double_t)x);
}
_INLINE long double
expm1l(long double x)
{
    return expm1((double_t)x);
}
_INLINE long double
log1pl(long double x)
{
    return log1p((double_t)x);
}
_INLINE long double
log2l(long double x)
{
    return log2((double_t)x);
}
_INLINE long double
logbl(long double x)
{
    return logb((double_t)x);
}
_INLINE long double
scalbnl(long double x, int n)
{
    return ldexpl(x, n);
}
_INLINE long double
scalblnl(long double x, long int n)
{
    return ldexp(x, (int)n);
}
_INLINE long double
fabsl(long double x)
{
    return fabs((double_t)x);
}
_INLINE long double
powl(long double x, long double y)
{
    return pow((double_t)x, (double_t)y);
}
_INLINE long double
sqrtl(long double x)
{
    return sqrt((double_t)x);
}
_INLINE long double
hypotl(long double x, long double y)
{
    return hypot((double_t)x, (double_t)y);
}
#ifndef __INTEL__
_INLINE long double
erfl(long double x)
{
    return erf((double_t)x);
}
_INLINE long double
erfcl(long double x)
{
    return erfc((double_t)x);
}
_INLINE long double
gammal(long double x)
{
    return gamma((double_t)x);
}
_INLINE long double
lgammal(long double x)
{
    return lgamma((double_t)x);
}
_INLINE long double
nextafterl(long double x, long double y)
{
    return nextafter((double)x, (double)y);
}
#endif
_INLINE long double
ceill(long double x)
{
    return ceil((double_t)x);
}
_INLINE long double
floorl(long double x)
{
    return floor((double_t)x);
}
_INLINE long double
nearbyintl(long double x)
{
    return nearbyint((double_t)x);
}
_INLINE long double
rintl(long double x)
{
    return rint((double_t)x);
}
_INLINE long int
lrintl(long double x)
{
    return lrint((double)x);
}
#ifdef __MSL_LONGLONG_SUPPORT__            /*- mm 961219 -*/
_INLINE long long
llrintl(long double x)
{
    return llrint((double)x);
}
_INLINE long long
llroundl(long double x)
{
    return llround((double)x);
}
#endif /*__MSL_LONGLONG_SUPPORT__*/        /*- mm 961220 -*/
_INLINE long double
roundl(long double x)
{
    return round((double_t)x);
}
_INLINE long int
lroundl(long double x)
{
    return lround((double)x);
}
_INLINE long double
truncl(long double x)
{
    return trunc((double_t)x);
}
_INLINE long double
fmodl(long double x, long double y)
{
    return fmod((double_t)x, (double_t)y);
}
_INLINE long double
remainderl(long double x, long double y)
{
    return remainder((double_t)x, (double_t)y);
}
_INLINE long double
copysignl(long double x, long double y)
{
    return copysign((double_t)x, (double_t)y);
}
_INLINE long double
remquol(long double x, long double y, int* quo)
{
    return remquo((double_t)x, (double_t)y, quo);
}
_INLINE long double
fdiml(long double x, long double y)
{
    return fdim((double_t)x, (double_t)y);
}
_INLINE long double
fmaxl(long double x, long double y)
{
    return fmax((double_t)x, (double_t)y);
}
_INLINE long double
fminl(long double x, long double y)
{
    return fmin((double_t)x, (double_t)y);
}
/* C9X foof's-- only the 22 K&R math functions have actual foof
   implementations(prototypes), keep the others as inlines returning double until/if
   they are actually written.
*/

_MSL_END_NAMESPACE_STD       /*- cc 010409 -*/

#if !(__INTEL__ && __option(k63d) || __SH__)

    _MSL_BEGIN_NAMESPACE_STD /*- cc 010409 -*/

    float
      coshf(float x);
float sinhf(float x);
float tanhf(float x);
float frexpf(float x, int* exp);
float ldexpf(float x, int exp);
float expf(float x);
float logf(float x);
float log10f(float x);

_INLINE float fabsf(float x);
_INLINE float
powf(float x, float y)
{
    return (float)pow((double_t)x, (double_t)y);
}
#if !__PPCGEKKO__
_INLINE float
sqrtf(float x)
{
#if __MIPS__ && __MIPS_ISA2__ && __fpu__

    if (x >= 0.0)
    {
        return __s_sqrt(x);
    }
    else
    {
        return NAN;
    }
#else
    return (float)sqrt((double_t)x);
#endif
}
#endif

_MSL_END_NAMESPACE_STD       /*- cc 010409 -*/

#endif                                     /*( __INTEL__ && __option(k63d) )*/

#if !__PPCGEKKO__
#include <math_config.h>
#endif

    _MSL_BEGIN_NAMESPACE_STD /*- cc 010409 -*/

#if __PPCGEKKO__
/*
 * sw 010918 - Moved into the namespace so the functions
 * defined in math_ppc.h will be in the appropriate
 * namespace. Possibly others will follow along with
 * this approach, but for now it to make sure other
 * MSL's are not affected.
 */
#include <math_config.h>
#endif

/*modff is the same everywhere */
#pragma cplusplus on
        _INLINE float
        modff(float x, float* iptr)
{
    switch (fpclassify(x))
    {
        case FP_NAN:
        case FP_ZERO:
            *iptr = x;
            return x;
            break;
        case FP_INFINITE:
            *iptr = x;
            return 0.0f;
            break;
        case FP_SUBNORMAL:
            *iptr = 0.0f;
            return x;
            break;
        default:                        /*normal case */
            const _INT32 i = (_INT32)x; /*truncated toward zero */
            const float  frac =
                x -
                (float)
                    i; /* fractional part of x(subtraction is exact in this case) */
            if ((!(*(_INT32*)&frac)) || ((*(_INT32*)&x) & 0x7f800000) >= 0x4B800000)
            {
                *iptr = x;
                return 0.0f;
            }
            *iptr = i;
            return frac;
    }
}

#pragma cplusplus reset
_INLINE float
acoshf(float x)
{
    return (float)acosh((double_t)x);
}
_INLINE float
asinhf(float x)
{
    return (float)asinh((double_t)x);
}
_INLINE float
atanhf(float x)
{
    return (float)atanh((double_t)x);
}
_INLINE float
exp2f(float x)
{
    return (float)exp2((double_t)x);
}
_INLINE float
expm1f(float x)
{
    return (float)expm1((double_t)x);
}
_INLINE float
log1pf(float x)
{
    return (float)log1p((double_t)x);
}
_INLINE float
logbf(float x)
{
    return (float)logb((double_t)x);
}
_INLINE float
scalbnf(float x, int n)
{
    return (float)ldexpf(x, n);
}
_INLINE float
scalblnf(float x, long int n)
{
    return (float)ldexpf(x, (int)n);
}
_INLINE float
hypotf(float x, float y)
{
    return (float)hypot((double_t)x, (double_t)y);
}
#ifndef __INTEL__
_INLINE float
erff(float x)
{
    return (float)erf((double_t)x);
}
_INLINE float
erfcf(float x)
{
    return (float)erfc((double_t)x);
}
_INLINE float
gammaf(float x)
{
    return (float)gamma((double_t)x);
}
_INLINE float
lgammaf(float x)
{
    return (float)lgamma((double_t)x);
}
_INLINE float
nextafterf(float x, float y)
{
    return (float)nextafter((double_t)x, (double_t)y);
}
#endif
_INLINE float
nearbyintf(float x)
{
    return (float)nearbyint((double_t)x);
}
_INLINE float
rintf(float x)
{
    return (float)rint((double_t)x);
}
_INLINE long int
lrintf(float x)
{
    return lrint((double)x);
}
_INLINE float
roundf(float x)
{
    return (float)round((double_t)x);
}
_INLINE long int
lroundf(float x)
{
    return lround((double)x);
}
#ifdef __MSL_LONGLONG_SUPPORT__            /*- mm 961219 -*/
_INLINE long long
llroundf(float x)
{
    return llround((double)x);
}
_INLINE long long
llrintf(float x)
{
    return llrint((double)x);
}
#endif /*__MSL_LONGLONG_SUPPORT__*/        /*- mm 961220 -*/
_INLINE float
truncf(float x)
{
    return (float)trunc((double_t)x);
}
_INLINE float
remainderf(float x, float y)
{
    return (float)remainder((double_t)x, (double_t)y);
}
_INLINE float
copysignf(float x, float y)
{
    return (float)copysign((double_t)x, (double_t)y);
}
_INLINE float
remquof(float x, float y, int* quo)
{
    return (float)remquo((double_t)x, (double_t)y, quo);
}
_INLINE float
fdimf(float x, float y)
{
    return (float)fdim((double_t)x, (double_t)y);
}
_INLINE float
fmaxf(float x, float y)
{
    return (float)fmax((double_t)x, (double_t)y);
}
_INLINE float
fminf(float x, float y)
{
    return (float)fmin((double_t)x, (double_t)y);
}
#ifdef __cplusplus
/*enable these for only C++*/
_INLINE float
abs(float x)
{
    return fabsf(x);
}
_INLINE double
abs(double x)
{
    return fabs(x);
}
_INLINE long double
abs(long double x)
{
    return fabsl(x);
}
_MSL_END_NAMESPACE_STD /*- cc 010409 -*/

#if defined(__ANSI_OVERLOAD__)

#include <tgmath.h>             /* tgmath has only overloads for the 22 standard */
/* K&R math functions, the C9X extensions are below */
#include <math_integral.h>

    _MSL_BEGIN_NAMESPACE_STD /*- cc 010409 -*/

        _INLINE float
        acosh(float x)
{
    return acoshf(x);
}
_INLINE float
asinh(float x)
{
    return asinhf(x);
}
_INLINE float
atanh(float x)
{
    return atanhf(x);
}
_INLINE float
exp2(float x)
{
    return exp2f(x);
}
_INLINE float
expm1(float x)
{
    return expm1f(x);
}
_INLINE float
log1p(float x)
{
    return log1pf(x);
}
_INLINE float
log2(float x)
{
    return log2f(x);
}
_INLINE float
logb(float x)
{
    return logbf(x);
}
_INLINE float
scalbn(float x, int n)
{
    return ldexpf(x, n);
}
_INLINE float
scalbln(float x, long int n)
{
    return ldexpf(x, (int)n);
}
_INLINE float
hypot(float x, float y)
{
    return hypotf(x, y);
}
#ifndef __INTEL__
_INLINE float
erf(float x)
{
    return erff(x);
}
_INLINE float
erfc(float x)
{
    return erfcf(x);
}
_INLINE float
gamma(float x)
{
    return gammaf(x);
}
_INLINE float
lgamma(float x)
{
    return lgammaf(x);
}
_INLINE float
nextafter(float x, float y)
{
    return nextafterf(x, y);
}
#endif
_INLINE float
nearbyint(float x)
{
    return nearbyintf(x);
}
_INLINE float
rint(float x)
{
    return rintf(x);
}
_INLINE long int
lrint(float x)
{
    return lrintf(x);
} /*- mm 961220 -*/
_INLINE float
round(float x)
{
    return roundf(x);
}
_INLINE long int
lround(float x)
{
    return lroundf(x);
}
#ifdef __MSL_LONGLONG_SUPPORT__ /*- mm 961219 -*/
_INLINE long long
llround(float x)
{
    return llroundf(x);
}
_INLINE long long
llrint(float x)
{
    return llrintf(x);
}
#endif /*__MSL_LONGLONG_SUPPORT__*/ /*- mm 961220 -*/
_INLINE float
trunc(float x)
{
    return truncf(x);
}
_INLINE float
remainder(float x, float y)
{
    return remainderf(x, y);
}
_INLINE float
copysign(float x, float y)
{
    return copysignf(x, y);
}
_INLINE float
remquo(float x, float y, int* quo)
{
    return remquof(x, y, quo);
}
_INLINE float
fdim(float x, float y)
{
    return fdimf(x, y);
}
_INLINE float
fmax(float x, float y)
{
    return fmaxf(x, y);
}
_INLINE float
fmin(float x, float y)
{
    return fminf(x, y);
}
/*  foo(long double) support */

_INLINE long int
lrint(long double x)
{
    return lrintl(x);
}
#ifdef __MSL_LONGLONG_SUPPORT__     /*- mm 961219 -*/
_INLINE long long
llrint(long double x)
{
    return llrintl(x);
}
_INLINE long long
llround(long double x)
{
    return llroundl(x);
}
#endif /*__MSL_LONGLONG_SUPPORT__*/ /*- mm 961220 -*/
_INLINE long int
lround(long double x)
{
    return lroundl(x);
}
#ifndef __INTEL__
_INLINE long double
nextafter(long double x, long double)
{
    return nextafterl(x, y);
}
#endif
_INLINE long double
acosh(long double x)
{
    return acoshl(x);
}
_INLINE long double
asinh(long double x)
{
    return asinhl(x);
}
_INLINE long double
atanh(long double x)
{
    return atanhl(x);
}
_INLINE long double
exp2(long double x)
{
    return exp2l(x);
}
_INLINE long double
expm1(long double x)
{
    return expm1l(x);
}
_INLINE long double
log1p(long double x)
{
    return log1pl(x);
}
_INLINE long double
log2(long double x)
{
    return log2l(x);
}
_INLINE long double
logb(long double x)
{
    return logbl(x);
}
_INLINE long double
hypot(long double x, long double y)
{
    return hypotl(x, y);
}
#ifndef __INTEL__
_INLINE long double
erf(long double x)
{
    return erfl(x);
}
_INLINE long double
erfc(long double x)
{
    return erfcl(x);
}
_INLINE long double
gamma(long double x)
{
    return gammal(x);
}
_INLINE long double
lgamma(long double x)
{
    return lgammal(x);
}
#endif
_INLINE long double
nearbyint(long double x)
{
    return nearbyintl(x);
}
_INLINE long double
rint(long double x)
{
    return rintl(x);
}
_INLINE long double
round(long double x)
{
    return roundl(x);
}
_INLINE long double
trunc(long double x)
{
    return truncl(x);
}
_INLINE long double
remainder(long double x, long double y)
{
    return remainderl(x, y);
}
_INLINE long double
copysign(long double x, long double y)
{
    return copysignl(x, y);
}
_INLINE long double
remquo(long double x, long double y, int* quo)
{
    return remquol(x, y, quo);
}
_INLINE long double
fdim(long double x, long double y)
{
    return fdiml(x, y);
}
_INLINE long double
fmax(long double x, long double y)
{
    return fmaxl(x, y);
}
_INLINE long double
fmin(long double x, long double y)
{
    return fminl(x, y);
}
_INLINE long double
scalbn(long double x, int n)
{
    return ldexpl(x, n);
}
_INLINE long double
scalbln(long double x, long int n)
{
    return ldexpl(x, (int)n);
}
_MSL_END_NAMESPACE_STD /*- cc 010409 -*/

#endif                              /* defined(__ANSI_OVERLOAD__) */

#endif                              /*defined(__cplusplus) */

#endif                              /*( __dest_os ==__mac_os) */

#endif                              /* _No_Floating_Point */

#endif                              /* _MSL_CMATH */

/* Change record:
 * mf  981019 created portable cmath for all mwerks compilers/targets--not intended
 * for mac_os mf  990115 rewrote for cross platform portability mf  990118 added
 * inclusion of amd_k63dnow!/tgmath headers for amd+ changes from Brian Stern mf
 * 990127 tgmath for ansi_overloads mf  990202 move k63d pragma to allow
 * classification macros to have k6 calling conv(prevents femms from being
 * generated(i.e return value is not on fp stack)) mf  990205 fixed up scalbn mess,
 * now it just returns ldexp.-- note: scalbn files can be removed from fdlibm mf
 * 990217 moved modff to actual inlined implementation in _INLINE section mf  990309
 * pragma at line 566 removed(wrong place) mf  990513 fixed implicit type conversion
 * warning for signbitf this is an irrelevant fix because signbitf/d have been
 *            removed in other branches of msl, this comment should be removed when
 * the merge of these two version occurs mm  990520 Added wrappers to long long
 * function definitions vss 990803 Cleaned up code a little bit vss 990803 Make
 * __float_nan, __float_huge __double_huge and __extended_huge agree with the types
 * they are in cfloat and float.c mm  991216 Added prototype for nan() mf  000417
 * cleanup namespace stuff changed _INLINE to _INLINE mf  000417 only export some of
 * the foofs for k6--they are inlined mf  000619 turned off k6 calling convention for
 * double functions temporarily. as  000823 _MSL_USING_NAMESPACE was out of wack when
 * __ANSI_OVERLOAD__ was not defined. JWW 001208 Added case for targeting Mach-O cc
 * 010124 Changed FLT_EVAL_METHOD from 0 to 2 pmk 010404 removed pragma k63d_calls
 * wrappers around pow and copysign cc  010405 removed pragma options align native
 * and reset cc  010409 updated defines to JWW new namespace macros hh  010411
 * changed the #define nan to an inline function when C++ is turned on cc  010510
 * removed __STDC_IEC_559__ ejs 010622 FLT_EVAL_METHOD is 0 for most targets *except*
 * Intel using x87 FP.
 */
