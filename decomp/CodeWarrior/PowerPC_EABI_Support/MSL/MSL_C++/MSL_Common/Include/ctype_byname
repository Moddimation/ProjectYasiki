/* Metrowerks Standard Library
 * Copyright ÃÂ¯ÃÂ½C 1995-2001 Metrowerks Corporation.  All rights
 * reserved.
 *
 * $Date: 2001/07/27 20:50:54 $
 * $Revision: 1.9.2.1 $
 */

// ctype_byname

#ifndef _CTYPE_BYNAME
#define _CTYPE_BYNAME

#include <mslconfig>

#ifndef _MSL_NO_IO

#include <cstdlib>
#include <cstring>
#include <ctype>
#include <fstream>

#ifndef RC_INVOKED

#pragma options align = native

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
#if _MSL_FORCE_ENUMS_ALWAYS_INT
#pragma enumsalwaysint on
#else
#pragma enumsalwaysint off
#endif
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
#if _MSL_FORCE_ENABLE_BOOL_SUPPORT
#pragma bool on
#else
#pragma bool off
#endif
#endif

#ifdef min
#undef min
#endif

#ifdef max
#undef max
#endif

#ifndef _MSL_NO_CPP_NAMESPACE
namespace std
{
#endif

#ifndef _MSL_NO_LOCALE
template <class charT, class traits, class T, class U>
void
__read_ctype_entry (basic_istream<charT, traits>& infile,
                    Metrowerks::range_map<T, U>&  ctype_table,
                    const string*                 code_names,
                    const ctype<char>&            ct)
{
    charT syntax;
    infile >> syntax;
    if (infile.fail() || syntax != '[')
#ifndef _MSL_NO_EXCEPTIONS
        throw runtime_error ("syntax error reading ctype table");
#else
        __msl_error ("syntax error reading ctype table");
#endif
    T    x1, x2;
    bool was_quoted;
    __read_formatted_char (infile, x1, was_quoted);
    infile >> syntax;
    if (syntax == ']')
    {
        x2 = x1;
    }
    else if (syntax != '-')
#ifndef _MSL_NO_EXCEPTIONS
        throw runtime_error ("syntax error reading ctype table");
#else
        __msl_error ("syntax error reading ctype table");
#endif
    else
    {
        __read_formatted_char (infile, x2, was_quoted);
        infile >> syntax;
        if (syntax != ']')
#ifndef _MSL_NO_EXCEPTIONS
            throw runtime_error ("syntax error reading ctype table");
#else
            __msl_error ("syntax error reading ctype table");
#endif
    }
    infile >> syntax;
    if (syntax != '=')
#ifndef _MSL_NO_EXCEPTIONS
        throw runtime_error ("syntax error reading ctype table");
#else
        __msl_error ("syntax error reading ctype table");
#endif
    ios_base::iostate         err = ios_base::goodbit;
    istreambuf_iterator<char> in (infile), end;
    U                         y = U();
    while (true)
    {
        ws (infile);
        const string* i = __parse_a_word (in, end, code_names, code_names + 8, ct, err);
        if (err)
        {
            infile.setstate (err);
        }
        if (infile.fail() || i == code_names + 8)
#ifndef _MSL_NO_EXCEPTIONS
            throw runtime_error ("syntax error reading ctype table");
#else
            __msl_error ("syntax error reading ctype table");
#endif
        y |= static_cast<U> (U (1) << (i - code_names));
        ws (infile);
        if (infile.peek() != '|')
        {
            break;
        }
        infile >> syntax;
    }
    ctype_table.insert (x1, x2, y);
}

template <class charT, class traits, class T, class U>
void
__read_case_entry (basic_istream<charT, traits>& infile, Metrowerks::range_map<T, U>& case_table)
{
    charT syntax;
    infile >> syntax;
    if (infile.fail() || syntax != '[')
#ifndef _MSL_NO_EXCEPTIONS
        throw runtime_error ("syntax error reading case table");
#else
        __msl_error ("syntax error reading case table");
#endif
    T    x1, x2;
    bool was_quoted;
    __read_formatted_char (infile, x1, was_quoted);
    infile >> syntax;
    if (syntax == ']')
    {
        x2 = x1;
    }
    else if (syntax != '-')
#ifndef _MSL_NO_EXCEPTIONS
        throw runtime_error ("syntax error reading case table");
#else
        __msl_error ("syntax error reading case table");
#endif
    else
    {
        __read_formatted_char (infile, x2, was_quoted);
        infile >> syntax;
        if (syntax != ']')
#ifndef _MSL_NO_EXCEPTIONS
            throw runtime_error ("syntax error reading case table");
#else
            __msl_error ("syntax error reading case table");
#endif
    }
    infile >> syntax;
    if (syntax != '=')
#ifndef _MSL_NO_EXCEPTIONS
        throw runtime_error ("syntax error reading case table");
#else
        __msl_error ("syntax error reading case table");
#endif
    U y1, y2;
    __read_formatted_char (infile, y1, was_quoted);
    if (infile.fail())
#ifndef _MSL_NO_EXCEPTIONS
        throw runtime_error ("syntax error reading case table");
#else
        __msl_error ("syntax error reading case table");
#endif
    ws (infile);
    if (infile.peek() == '-')
    {
        infile >> syntax;
        __read_formatted_char (infile, y2, was_quoted);
        if (infile.fail())
#ifndef _MSL_NO_EXCEPTIONS
            throw runtime_error ("syntax error reading case table");
#else
            __msl_error ("syntax error reading case table");
#endif
    }
    else
    {
        y2 = y1;
    }
    case_table.insert (x1, x2, y1, y2);
}

template <class charT>
void
__ctype_byname_init (const char*                                     std_name,
                     const string&                                   ctype_marker,
                     Metrowerks::range_map<charT, ctype_base::mask>& ctype_table,
                     Metrowerks::range_map<charT, charT>&            lower_table,
                     Metrowerks::range_map<charT, charT>&            upper_table)
{
    if (std_name == 0)
#ifndef _MSL_NO_EXCEPTIONS
        throw runtime_error ("ctype_byname constructed with null name");
#else
        __msl_error ("ctype_byname constructed with null name");
#endif
    if (strlen (std_name) == 0)
    {
        std_name = getenv ("LANG");
    }
    if (std_name != 0 && strcmp (std_name, "C") != 0)
    {
#ifndef _MSL_NO_FILE_IO
        ifstream infile (std_name);
        if (!infile.is_open())
#ifndef _MSL_NO_EXCEPTIONS
            throw runtime_error (string ("ctype_byname constructed with unsupported name: ") +
                                 std_name);
#else
            __msl_error ("ctype_byname constructed with unsupported name");
#endif
        string word;
        bool   success = true;
        while (infile.good())
        {
            infile.ignore (numeric_limits<streamsize>::max(), '$');
            infile >> word;
            if (infile.fail())
            {
                break;
            }
            if (word == ctype_marker)
            {
                success = false;
                ctype_table.clear();
                lower_table.clear();
                upper_table.clear();
                string table_names[3];
                table_names[0] = "ctype";
                table_names[1] = "lower";
                table_names[2] = "upper";
                const string (&ctable_names)[3] = table_names;
                string code_names[8];
                code_names[0] = "control";
                code_names[1] = "motion";
                code_names[2] = "space";
                code_names[3] = "punct";
                code_names[4] = "digit";
                code_names[5] = "xdigit";
                code_names[6] = "lower";
                code_names[7] = "upper";
                const ctype<char>&        ct = _USE_FACET (ctype<char>, infile.getloc());
                ios_base::iostate         err = ios_base::goodbit;
                istreambuf_iterator<char> in (infile), end;
                while (true)
                {
                    ws (infile);
                    const string* i =
                        __parse_a_word (in, end, ctable_names, ctable_names + 3, ct, err);
                    if (err)
                    {
                        infile.setstate (err);
                    }
                    if (i == ctable_names + 3)
                    {
                        break;
                    }
                    switch (i - ctable_names)
                    {
                        case 0: // ctype
                            __read_ctype_entry (infile, ctype_table, code_names, ct);
                            break;
                        case 1: // lower
                            __read_case_entry (infile, lower_table);
                            break;
                        case 2: // upper
                            __read_case_entry (infile, upper_table);
                            break;
                    }
                }
                success = true;
                break;
            }
        }
        if (!success)
#ifndef _MSL_NO_EXCEPTIONS
            throw runtime_error (string ("ctype_byname file input error: ") + std_name);
#else
            __msl_error ("ctype_byname file input error");
#endif
#else                           // _MSL_NO_FILE_IO
#ifndef _MSL_NO_EXCEPTIONS
        throw runtime_error (string ("ctype_byname constructed with unsupported name: ") +
                             std_name);
#else
        __msl_error ("ctype_byname constructed with unsupported name");
#endif
        ctype_marker;
        ctype_table;
        lower_table;
        upper_table;
#endif                          // _MSL_NO_FILE_IO
    }
}

template <class charT>
class ctype_byname : public ctype<charT>
{
public:
    typedef typename ctype<charT>::mask mask;
    explicit ctype_byname (const char* std_name, size_t refs = 0);

protected:
    virtual ÃÂ¢ÃÂÃÂ¾ctype_byname () {}
};

template <class charT>
inline ctype_byname<charT>::ctype_byname (const char* std_name, size_t refs) : ctype<charT> (refs)
{
    typedef ctype<charT> base;
    __ctype_byname_init (std_name,
                         "ctype_wide",
                         base::__table_,
                         base::__lower_map_,
                         base::__upper_map_);
}

template <>
class ctype_byname<char> : public ctype<char>
{
public:
    typedef ctype<char>::mask mask;
    explicit ctype_byname (const char* std_name, size_t refs = 0);

protected:
    virtual ÃÂ¢ÃÂÃÂ¾ctype_byname ();
};

template <>
inline ctype_byname<char>::ctype_byname (const char* std_name, size_t refs)
  : ctype<char> (0, false, refs)
{
    Metrowerks::range_map<unsigned char, unsigned char> ctype_table;
    Metrowerks::range_map<unsigned char, unsigned char> lower_table;
    Metrowerks::range_map<unsigned char, unsigned char> upper_table;
    __ctype_byname_init (std_name, "ctype_narrow", ctype_table, lower_table, upper_table);
    typedef Metrowerks::alloc_ptr<unsigned char, Metrowerks::array_deleter<unsigned char> >
             auto_ptr;
    auto_ptr p1 (new unsigned char[256]);
    auto_ptr p2 (new unsigned char[256]);
    auto_ptr p3 (new unsigned char[256]);
    __table_ = p1.release();
    __lower_map_ = p2.release();
    __upper_map_ = p3.release();
    __owns_ = true;
    {
        for (int i = 0; i < 256; ++i)
        {
            const_cast<ctype_base::mask&> (__table_[i]) = ctype_table[(unsigned char)i];
        }
    }
    {
        for (int i = 0; i < 256; ++i)
        {
            const_cast<unsigned char&> (__lower_map_[i]) = lower_table[(unsigned char)i];
        }
    }
    {
        for (int i = 0; i < 256; ++i)
        {
            const_cast<unsigned char&> (__upper_map_[i]) = upper_table[(unsigned char)i];
        }
    }
}

template <>
inline ctype_byname<char>::ÃÂ¢ÃÂÃÂ¾ctype_byname()
{
    if (__owns_)
    {
        delete[] __lower_map_;
        delete[] __upper_map_;
    }
}
#endif                          // _MSL_NO_LOCALE

#ifndef _MSL_NO_CPP_NAMESPACE
} // namespace std
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
#pragma enumsalwaysint reset
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
#pragma bool reset
#endif

#pragma options align = reset

#endif // RC_INVOKED

#endif // _MSL_NO_IO

#endif // _CTYPE_BYNAME

// hh 010228 Created
// hh 010402 Removed 68K CMF support
