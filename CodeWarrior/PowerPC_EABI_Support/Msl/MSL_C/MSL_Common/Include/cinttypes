/*  Metrowerks Standard Library  */

/*  $Date: 1999/07/30 00:25:14 $ 
 *  $Revision: 1.7.4.1 $ 
 *  $NoKeywords: $ 
 *
 *		Copyright 1995-1999 Metrowerks, Inc.
 *		All rights reserved.
 */

/*
 *	cinttypes
*/

#ifndef __cinttypes__
#define __cinttypes__

#include <climits>
#include <cstdlib>                    	/* mm 981012 */
#ifndef __NO_WIDE_CHAR
#include <cwchar>   /* do define WCHAR_MIN and WCHAR_MAX */				
#endif 	/* #ifndef __NO_WIDE_CHAR */	/* mm 981012 */

#ifdef __cplusplus              
	#ifdef _MSL_USING_NAMESPACE
		namespace std {
	#endif
	extern "C" {
#endif
/*
7.4  Integer types <inttypes.h>
       [#1] The header <inttypes.h> defines sets of  typedef  names
       for  integer  types  having  specified  widths,  and defines
       corresponding sets of macros.  It also defines  macros  that
       specify  limits  of  integer  types corresponding to typedef
       names defined in other standard headers, and  declares  four
       functions   for  converting  numeric  character  strings  to
       greatest-width integers.
       [#2] Typedef names are defined in the following categories:
          - integer types having certain exact widths;
          - integer types having at least certain specified widths;
          - fastest integer types having at least certain specified
            widths;
          - integer types wide enough to hold pointers to objects;
          - integer types having greatest width.
       (Some of these typedef names may denote the same type.)
       [#3] Corresponding macros  specify  limits  of  the  defined
       types,  construct  suitable character constants, and provide
       conversion   specifiers   for   use   with   the   formatted
       input/output functions.
       [#4] For each typedef name  described  herein  that  can  be
       defined  as  a  type  existing  in  the   implementation,147
       <inttypes.h>  shall  define  that typedef name, and it shall
       define the associated macros.  Conversely, for each  typedef
       name  described  herein  that  cannot  be  defined as a type
       existing  in  the  implementation,  <inttypes.h>  shall  not
       define that typedef name, nor shall it define the associated
       macros.
       __________
       147. Some  of these typedef names may denote implementation-
           defined extended integer types.

7.4.1  Typedef names for integer types
       [#1] When typedef names differing only  in  the  absence  or
       presence  of  the  initial  u are defined, they shall denote
       corresponding signed and  unsigned  types  as  described  in
       subclause 6.1.2.5.

7.4.1.1  Exact-width integer types
       [#1] Each of  the  following  typedef  names  designates  an
       integer  type  that  has exactly the specified width.  These
       typedef names have the general form  of  intn_t  or  uintn_t
       where n is the required width.  For example, uint8_t denotes
       an unsigned integer type that has a width of exactly 8 bits.
       [#2] The  following  designate  exact-width  signed  integer
       types:
               int8_t     int16_t     int32_t     int64_t
 */
typedef signed char int8_t;
typedef short int   int16_t;
typedef long int    int32_t;
#ifdef __MSL_LONGLONG_SUPPORT__					/* mm 981023 */
typedef long long   int64_t;
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
/*
       [#3] The following designate  exact-width  unsigned  integer
       types:
               uint8_t    uint16_t    uint32_t    uint64_t
       (Any of these types might not exist.)
*/
typedef unsigned char		uint8_t;
typedef unsigned short int  uint16_t;
typedef unsigned long int   uint32_t;
#ifdef __MSL_LONGLONG_SUPPORT__					/* mm 981023 */
typedef unsigned long long  uint64_t;
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
/*
7.4.1.2  Minimum-width integer types
       [#1] Each of  the  following  typedef  names  designates  an
       integer  type  that  has  at least the specified width, such
       that no integer  type  of  lesser  size  has  at  least  the
       specified  width.  These typedef names have the general form
       of int_leastn_t or uint_leastn_t  where  n  is  the  minimum
       required width.  For example, int_least32_t denotes a signed
       integer type that has a width of at least 32 bits.
       [#2] The following designate  minimum-width  signed  integer
       types:
               int_least8_t      int_least16_t
               int_least32_t     int_least64_t
*/
typedef signed char int_least8_t;
typedef short int   int_least16_t;
typedef long int    int_least32_t;
#ifdef __MSL_LONGLONG_SUPPORT__					/* mm 981023 */
typedef long long   int_least64_t;
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
/*
       [#3] The following designate minimum-width unsigned  integer
       types:
               uint_least8_t     uint_least16_t
               uint_least32_t    uint_least64_t
       (These types must exist.)
*/
typedef unsigned char		uint_least8_t;
typedef unsigned short int  uint_least16_t;
typedef unsigned long int   uint_least32_t;
#ifdef __MSL_LONGLONG_SUPPORT__					/* mm 981023 */
typedef unsigned long long  uint_least64_t;
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
/*
7.4.1.3  Fastest minimum-width integer types
       [#1] Each of  the  following  typedef  names  designates  an
       integer type that is  usually  fastest148  to  operate  with
       among  all  integer  types  that have at least the specified
       width.   These  typedef  names  have  the  general  form  of
       int_fastn_t  or uint_fastn_t where n is the minimum required
       width.  For example, int_fast16_t denotes the fastest signed
       integer type that has a width of at least 16 bits.
       __________
       148. The designated type is not guaranteed to be fastest for
           all purposes; if the implementation has no clear grounds
           for  choosing one type over another, it will simply pick
           some integer type satisfying the  signedness  and  width
           requirements.
       [#2] The following designate  fastest  minimum-width  signed
       integer types:
               int_fast8_t      int_fast16_t
               int_fast32_t     int_fast64_t
*/
typedef signed char int_fast8_t;
typedef short int   int_fast16_t;
typedef long int    int_fast32_t;
#ifdef __MSL_LONGLONG_SUPPORT__					/* mm 981023 */
typedef long long   int_fast64_t;
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
/*
       [#3] The following designate fastest minimum-width  unsigned
       integer types:
               uint_fast8_t     uint_fast16_t
               uint_fast32_t    uint_fast64_t
       (These types must exist.)
*/
typedef unsigned char		uint_fast8_t;
typedef unsigned short int  uint_fast16_t;
typedef unsigned long int   uint_fast32_t;
#ifdef __MSL_LONGLONG_SUPPORT__					/* mm 981023 */
typedef unsigned long long  uint_fast64_t;
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
/*
7.4.1.4  Integer types capable of holding object pointers
       [#1] The following typedef name designates a signed  integer
       type with the property that any valid pointer to void can be
       converted to this type, then converted back  to  pointer  to
       void,  and  the  result  will  compare equal to the original
       pointer:
               intptr_t
*/
typedef int32_t intptr_t;
/*
       [#2] The  following  typedef  name  designates  an  unsigned
       integer  type  with  the  property that any valid pointer to
       void can be converted to this type, then converted  back  to
       pointer  to  void,  and the result will compare equal to the
       original pointer:
               uintptr_t
       (Either or both of these types might not exist.)
*/
typedef uint32_t uintptr_t;
/*
7.4.1.5  Greatest-width integer types
       [#1] The following typedef name designates a signed  integer
       type capable of representing any value of any signed integer
       type:
               intmax_t
*/
#ifdef __MSL_LONGLONG_SUPPORT__					/* mm 981023 */
typedef int64_t intmax_t;
#else											/* mm 981029 */
typedef int32_t intmax_t;						/* mm 981029 */
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
/*
       [#2] The  following  typedef  name  designates  an  unsigned
       integer  type  capable  of  representing  any  value  of any
       unsigned integer type:
               uintmax_t
       (These types must exist.)
*/
#ifdef __MSL_LONGLONG_SUPPORT__					/* mm 981023 */
typedef uint64_t uintmax_t;
#else											/* mm 981029 */
typedef uint32_t uintmax_t;						/* mm 981029 */
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
/*
7.4.2  Limits of specified-width integer types
       [#1] The following object-like macros149 specify the minimum
       and  maximum  limits  of  integer types corresponding to the
       typedef names defined  in  <inttypes.h>.   Each  macro  name
       corresponds to a similar typedef name in subclause 7.4.1.
       __________
       149. C++ implementations should  define  these  macros  only
           when  __STDC_LIMIT_MACROS is defined before <inttypes.h>
           is included.
       [#2] Each instance of any defined macro shall be replaced by
       a  constant expression suitable for use in #if preprocessing
       directives, and this expression shall have the same type  as
       would  an  expression that is an object of the corresponding
       type converted according to  the  integer  promotions.   Its
       implementation-defined value shall be equal to or greater in
       magnitude (absolute  value)  than  the  corresponding  value
       given below, with the same sign.
7.4.2.1  Limits of exact-width integer types
          - minimum values of exact-width signed integer types
            INT8_MIN                            -127
            INT16_MIN                         -32767
            INT32_MIN                    -2147483647
            INT64_MIN           -9223372036854775807
            (The value must be  either  that  given  or  exactly  1
            less.)
*/
#if (!defined(__cplusplus)) || defined(__STDC_LIMIT_MACROS)
#define INT8_MIN		SCHAR_MIN
#define INT16_MIN		SHRT_MIN
#define INT32_MIN		LONG_MIN
#define INT64_MIN		LLONG_MIN
/*
          - maximum values of exact-width signed integer types
            INT8_MAX                            +127
            INT16_MAX                         +32767
            INT32_MAX                    +2147483647
            INT64_MAX           +9223372036854775807
            (The value must be exactly that given.)
*/
#define INT8_MAX		SCHAR_MAX
#define INT16_MAX		SHRT_MAX
#define INT32_MAX		LONG_MAX
#define INT64_MAX		LLONG_MAX
/*
          - maximum values of exact-width unsigned integer types
            UINT8_MAX                            255
            UINT16_MAX                         65535
            UINT32_MAX                    4294967295
            UINT64_MAX          18446744073709551615
            (The value must be exactly that given.)
*/
#define UINT8_MAX		UCHAR_MAX
#define UINT16_MAX		USHRT_MAX
#define UINT32_MAX		ULONG_MAX
#define UINT64_MAX		ULLONG_MAX
/*
7.4.2.2  Limits of minimum-width integer types
          - minimum values of minimum-width signed integer types
            INT_LEAST8_MIN                      -127
            INT_LEAST16_MIN                   -32767
            INT_LEAST32_MIN              -2147483647
            INT_LEAST64_MIN     -9223372036854775807
*/
#define INT_LEAST8_MIN		SCHAR_MIN
#define INT_LEAST16_MIN		SHRT_MIN
#define INT_LEAST32_MIN		LONG_MIN
#define INT_LEAST64_MIN		LLONG_MIN
/*
          - maximum values of minimum-width signed integer types
            INT_LEAST8_MAX                      +127
            INT_LEAST16_MAX                   +32767
            INT_LEAST32_MAX              +2147483647
            INT_LEAST64_MAX     +9223372036854775807
*/
#define INT_LEAST8_MAX		SCHAR_MAX
#define INT_LEAST16_MAX		SHRT_MAX
#define INT_LEAST32_MAX		LONG_MAX
#define INT_LEAST64_MAX		LLONG_MAX
/*
          - maximum values of minimum-width unsigned integer types
            UINT_LEAST8_MAX                      255
            UINT_LEAST16_MAX                   65535
            UINT_LEAST32_MAX              4294967295
            UINT_LEAST64_MAX    18446744073709551615
*/
#define UINT_LEAST8_MAX		UCHAR_MAX
#define UINT_LEAST16_MAX	USHRT_MAX
#define UINT_LEAST32_MAX	ULONG_MAX
#define UINT_LEAST64_MAX	ULLONG_MAX
/*
7.4.2.3  Limits of fastest minimum-width integer types
          - minimum values of fastest minimum-width signed  integer
            types
            INT_FAST8_MIN                       -127
            INT_FAST16_MIN                    -32767
            INT_FAST32_MIN               -2147483647
            INT_FAST64_MIN      -9223372036854775807
*/
#define INT_FAST8_MIN		SCHAR_MIN
#define INT_FAST16_MIN		SHRT_MIN
#define INT_FAST32_MIN		LONG_MIN
#define INT_FAST64_MIN		LLONG_MIN
/*
          - maximum values of fastest minimum-width signed  integer
            types
            INT_FAST8_MAX                       +127
            INT_FAST16_MAX                    +32767
            INT_FAST32_MAX               +2147483647
            INT_FAST64_MAX      +9223372036854775807
*/
#define INT_FAST8_MAX		SCHAR_MAX
#define INT_FAST16_MAX		SHRT_MAX
#define INT_FAST32_MAX		LONG_MAX
#define INT_FAST64_MAX		LLONG_MAX
/*
           - maximum  values  of  fastest  minimum-width   unsigned
            integer types
            UINT_FAST8_MAX                       255
            UINT_FAST16_MAX                    65535
            UINT_FAST32_MAX               4294967295
            UINT_FAST64_MAX     18446744073709551615
*/
#define UINT_FAST8_MAX		UCHAR_MAX
#define UINT_FAST16_MAX		USHRT_MAX
#define UINT_FAST32_MAX		ULONG_MAX
#define UINT_FAST64_MAX		ULLONG_MAX
/*
7.4.2.4  Limits of integer types capable of holding object pointers
          - minimum value of pointer-holding signed integer type
            INTPTR_MIN                        -32767
          - maximum value of pointer-holding signed integer type
            INTPTR_MAX                        +32767
          - maximum value of pointer-holding unsigned integer type
            UINTPTR_MAX                        65535
*/            
#define INTPTR_MIN			LONG_MIN
#define INTPTR_MAX			LONG_MAX
#define UINTPTR_MAX			ULONG_MAX
/*
7.4.2.5  Limits of greatest-width integer types
          - minimum value of greatest-width signed integer type
            INTMAX_MIN          -9223372036854775807
          - maximum value of greatest-width signed integer type
            INTMAX_MAX          +9223372036854775807
          - maximum value of greatest-width unsigned integer type
            UINTMAX_MAX         18446744073709551615
*/            
#define INTMAX_MIN			LLONG_MIN
#define INTMAX_MAX			LLONG_MAX
#define UINTMAX_MAX			ULLONG_MAX
#endif   /*(!defined(__cplusplus)) || defined(__STDC_LIMIT_MACROS)*/
/*
7.4.3  Macros for integer constants
       [#1] The following function-like macros150 expand to integer
       constants   suitable  for  initializing  objects  that  have
       integer types corresponding  to  typedef  names  defined  in
       <inttypes.h>.   Each  macro  name  corresponds  to a similar
       typedef name in subclause 7.4.1.2 or 7.4.1.5.
       __________
       150. C++ implementations should  define  these  macros  only
           when    __STDC_CONSTANT_MACROS    is    defined   before
           <inttypes.h> is included.
       [#2] The argument in any instance of these macros shall be a
       decimal,  octal,  or  hexadecimal  constant  (as  defined in
       subclause 6.1.3.2) with a value that  does  not  exceed  the
       limits for the corresponding type.
7.4.3.1  Macros for minimum-width integer constants
       [#1] Each of the following  macros  expands  to  an  integer
       constant  having  the  value specified by its argument and a
       type with at least the specified width.  These  macro  names
       have  the  general  form of INTn_C or UINTn_C where n is the
       minimum required width.  For example, UINT64_C(0x123)  might
       expand to the integer constant 0x123ULL.
       [#2] The following expand to  integer  constants  that  have
       signed integer types:
               INT8_C(value)      INT16_C(value)
               INT32_C(value)     INT64_C(value)
*/
#if (!defined(__cplusplus)) || defined(__STDC_CONSTANT_MACROS)
#define INT8_C(value) 	value
#define INT16_C(value) 	value
#define INT32_C(value) 	value ## L
#define INT64_C(value) 	value ## LL
/*
       [#3] The following expand to  integer  constants  that  have
       unsigned integer types:
               UINT8_C(value)     UINT16_C(value)
               UINT32_C(value)    UINT64_C(value)
*/
#define UINT8_C(value) 	value ## U
#define UINT16_C(value) value ## U
#define UINT32_C(value) value ## UL
#define UINT64_C(value) value ## ULL
/*
7.4.3.2  Macros for greatest-width integer constants
       [#1] The following macro  expands  to  an  integer  constant
       having  the  value  specified  by  its argument and the type
       intmax_t:
               INTMAX_C(value)
       [#2] The following macro  expands  to  an  integer  constant
       having  the  value  specified  by  its argument and the type
       uintmax_t:
               UINTMAX_C(value)
*/
#define INTMAX_C(value)  value ## LL
#define UINTMAX_C(value) value ## ULL
#endif   /*(!defined(__cplusplus)) || defined(__STDC_CONSTANT_MACROS)*/
/*
7.4.4  Macros for format specifiers
       [#1] Each of the following object-like macros151 expands  to
       a string literal containing a conversion specifier, possibly
       modified by a prefix such as hh, h, l, or ll,  suitable  for
       use  within  the format argument of a formatted input/output
       function when converting  the  corresponding  integer  type.
       These  macro  names  have the general form of PRI (character
       string literals for the fprintf family)  or  SCN  (character
       string literals for the fscanf family),152  followed by  the
       conversion  specifier, followed by a name corresponding to a
       similar typedef  name  in  subclause  7.4.1.   For  example,
       PRIdFAST32 can be used in a format string to print the value
       of an integer of type int_fast32_t.
       __________
       151. C++ implementations should  define  these  macros  only
           when __STDC_FORMAT_MACROS is defined before <inttypes.h>
           is included.
       152. Separate  macros  are  given  for  use with fprintf and
           fscanf functions because,  typically,  different  format
           specifiers are required for fprintf and fscanf even when
           the type is the same.
       [#2] The fprintf macros for signed integers are:
           PRId8          PRId16         PRId32         PRId64
           PRIdLEAST8     PRIdLEAST16    PRIdLEAST32    PRIdLEAST64
           PRIdFAST8      PRIdFAST16     PRIdFAST32     PRIdFAST64
           PRIdMAX        PRIdPTR
           PRIi8          PRIi16         PRIi32         PRIi64
           PRIiLEAST8     PRIiLEAST16    PRIiLEAST32    PRIiLEAST64
           PRIiFAST8      PRIiFAST16     PRIiFAST32     PRIiFAST64
           PRIiMAX        PRIiPTR
*/
#if (!defined(__cplusplus)) || defined(__STDC_FORMAT_MACROS)
#define PRId8   	"d"
#define PRId16		"hd"
#define PRId32		"ld"
#define PRId64		"lld"
#define PRIdLEAST8  "d"
#define PRIdLEAST16	"hd"
#define PRIdLEAST32	"ld"
#define PRIdLEAST64	"lld"
#define PRIdFAST8   "d"
#define PRIdFAST16	"hd"
#define PRIdFAST32	"ld"
#define PRIdFAST64	"lld"
#define PRIdMAX		"lld"
#define PRIdPTR		"ld"
#define PRIi8		"i"
#define PRIi16		"hi"
#define PRIi32		"li"
#define PRIi64		"lli"
#define PRIiLEAST8	"i"
#define PRIiLEAST16	"hi"
#define PRIiLEAST32	"li"
#define PRIiLEAST64	"lli"
#define PRIiFAST8	"i"
#define PRIiFAST16	"hi"
#define PRIiFAST32	"li"
#define PRIiFAST64	"lli"
#define PRIiMAX		"lli"
#define PRIiPTR		"li"
/*
       [#3] The fprintf macros for unsigned integers are:
           PRIo8          PRIo16         PRIo32         PRIo64
           PRIoLEAST8     PRIoLEAST16    PRIoLEAST32    PRIoLEAST64
           PRIoFAST8      PRIoFAST16     PRIoFAST32     PRIoFAST64
           PRIoMAX        PRIoPTR
           PRIu8          PRIu16         PRIu32         PRIu64
           PRIuLEAST8     PRIuLEAST16    PRIuLEAST32    PRIuLEAST64
           PRIuFAST8      PRIuFAST16     PRIuFAST32     PRIuFAST64
           PRIuMAX        PRIuPTR
           PRIx8          PRIx16         PRIx32         PRIx64
           PRIxLEAST8     PRIxLEAST16    PRIxLEAST32    PRIxLEAST64
           PRIxFAST8      PRIxFAST16     PRIxFAST32     PRIxFAST64
           PRIxMAX        PRIxPTR
           PRIX8          PRIX16         PRIX32         PRIX64
           PRIXLEAST8     PRIXLEAST16    PRIXLEAST32    PRIXLEAST64
           PRIXFAST8      PRIXFAST16     PRIXFAST32     PRIXFAST64
           PRIXMAX        PRIXPTR
*/
#define PRIo8   	"o"
#define PRIo16		"ho"
#define PRIo32		"lo"
#define PRIo64		"llo"
#define PRIoLEAST8  "o"
#define PRIoLEAST16	"ho"
#define PRIoLEAST32	"lo"
#define PRIoLEAST64	"llo"
#define PRIoFAST8   "o"
#define PRIoFAST16	"ho"
#define PRIoFAST32	"lo"
#define PRIoFAST64	"llo"
#define PRIoMAX		"llo"
#define PRIoPTR		"lo"
#define PRIu8		"u"
#define PRIu16		"hu"
#define PRIu32		"lu"
#define PRIu64		"llu"
#define PRIuLEAST8	"u"
#define PRIuLEAST16	"hu"
#define PRIuLEAST32	"lu"
#define PRIuLEAST64	"llu"
#define PRIuFAST8	"u"
#define PRIuFAST16	"hu"
#define PRIuFAST32	"lu"
#define PRIuFAST64	"llu"
#define PRIuMAX		"llu"
#define PRIuPTR		"lu"
#define PRIx8		"x"
#define PRIx16		"hx"
#define PRIx32		"lx"
#define PRIx64		"llx"
#define PRIxLEAST8	"x"
#define PRIxLEAST16	"hx"
#define PRIxLEAST32	"lx"
#define PRIxLEAST64	"llx"
#define PRIxFAST8	"x"
#define PRIxFAST16	"hx"
#define PRIxFAST32	"lx"
#define PRIxFAST64	"llx"
#define PRIxMAX		"llx"
#define PRIxPTR		"lx"
#define PRIX8		"X"
#define PRIX16		"hX"
#define PRIX32		"lX"
#define PRIX64		"llX"
#define PRIXLEAST8	"X"
#define PRIXLEAST16	"hX"
#define PRIXLEAST32	"lX"
#define PRIXLEAST64	"llX"
#define PRIXFAST8	"X"
#define PRIXFAST16	"hX"
#define PRIXFAST32	"lX"
#define PRIXFAST64	"llX"
#define PRIXMAX		"llX"
#define PRIXPTR		"lX"
/*
       [#4] The fscanf macros for signed integers are:
           SCNd8          SCNd16         SCNd32         SCNd64
           SCNdLEAST8     SCNdLEAST16    SCNdLEAST32    SCNdLEAST64
           SCNdFAST8      SCNdFAST16     SCNdFAST32     SCNdFAST64
           SCNdMAX        SCNdPTR
           SCNi8          SCNi16         SCNi32         SCNi64
           SCNiLEAST8     SCNiLEAST16    SCNiLEAST32    SCNiLEAST64
           SCNiFAST8      SCNiFAST16     SCNiFAST32     SCNiFAST64
           SCNiMAX        SCNiPTR
*/
#define SCNd8   	"hhd"
#define SCNd16		"hd"
#define SCNd32		"ld"
#define SCNd64		"lld"
#define SCNdLEAST8  "hhd"
#define SCNdLEAST16	"hd"
#define SCNdLEAST32	"ld"
#define SCNdLEAST64	"lld"
#define SCNdFAST8   "hhd"
#define SCNdFAST16	"hd"
#define SCNdFAST32	"ld"
#define SCNdFAST64	"lld"
#define SCNdMAX		"lld"
#define SCNdPTR		"ld"
#define SCNi8		"hhi"
#define SCNi16		"hi"
#define SCNi32		"li"
#define SCNi64		"lli"
#define SCNiLEAST8	"hhi"
#define SCNiLEAST16	"hi"
#define SCNiLEAST32	"li"
#define SCNiLEAST64	"lli"
#define SCNiFAST8	"hhi"
#define SCNiFAST16	"hi"
#define SCNiFAST32	"li"
#define SCNiFAST64	"lli"
#define SCNiMAX		"lli"
#define SCNiPTR		"li"
/*
       [#5] The fscanf macros for unsigned integers are:
           SCNo8          SCNo16         SCNo32         SCNo64
           SCNoLEAST8     SCNoLEAST16    SCNoLEAST32    SCNoLEAST64
           SCNoFAST8      SCNoFAST16     SCNoFAST32     SCNoFAST64
           SCNoMAX        SCNoPTR
           SCNu8          SCNu16         SCNu32         SCNu64
           SCNuLEAST8     SCNuLEAST16    SCNuLEAST32    SCNuLEAST64
           SCNuFAST8      SCNuFAST16     SCNuFAST32     SCNuFAST64
           SCNuMAX        SCNuPTR
           SCNx8          SCNx16         SCNx32         SCNx64
           SCNxLEAST8     SCNxLEAST16    SCNxLEAST32    SCNxLEAST64
           SCNxFAST8      SCNxFAST16     SCNxFAST32     SCNxFAST64
           SCNxMAX        SCNxPTR
*/
#define SCNo8   	"hho"
#define SCNo16		"ho"
#define SCNo32		"lo"
#define SCNo64		"llo"
#define SCNoLEAST8  "hho"
#define SCNoLEAST16	"ho"
#define SCNoLEAST32	"lo"
#define SCNoLEAST64	"llo"
#define SCNoFAST8   "hho"
#define SCNoFAST16	"ho"
#define SCNoFAST32	"lo"
#define SCNoFAST64	"llo"
#define SCNoMAX		"llo"
#define SCNoPTR		"lo"
#define SCNu8		"hhu"
#define SCNu16		"hu"
#define SCNu32		"lu"
#define SCNu64		"llu"
#define SCNuLEAST8	"hhu"
#define SCNuLEAST16	"hu"
#define SCNuLEAST32	"lu"
#define SCNuLEAST64	"llu"
#define SCNuFAST8	"hhu"
#define SCNuFAST16	"hu"
#define SCNuFAST32	"lu"
#define SCNuFAST64	"llu"
#define SCNuMAX		"llu"
#define SCNuPTR		"lu"
#define SCNx8		"hhx"
#define SCNx16		"hx"
#define SCNx32		"lx"
#define SCNx64		"llx"
#define SCNxLEAST8	"hhx"
#define SCNxLEAST16	"hx"
#define SCNxLEAST32	"lx"
#define SCNxLEAST64	"llx"
#define SCNxFAST8	"hhx"
#define SCNxFAST16	"hx"
#define SCNxFAST32	"lx"
#define SCNxFAST64	"llx"
#define SCNxMAX		"llx"
#define SCNxPTR		"lx"
#endif   /*(!defined(__cplusplus)) || defined(__STDC_FORMAT_MACROS)*/
/*
       [#6] Because the default argument promotions do  not  affect
       pointer  parameters,  there  might not exist suitable fscanf
       format specifiers for some of the typedef names  defined  in
       this  header.   Consequently,  as a special exception to the
       requirement that the implementation shall define all  macros
       associated with each typedef name defined in this header, in
       such a case  the  problematic  fscanf  macros  may  be  left
       undefined.
Examples
               #include <inttypes.h>
               #include <wchar.h>
               int main(void)
               {
                       uintmax_t i = UINTMAX_MAX;    // this type always exists
                       wprintf(L"The largest integer value is %020"
                               PRIxMAX "\n", i);
                       return 0;
               }
7.4.5  Limits of other integer types
       [#1] The following object-like macros151 specify the minimum
       and maximum limits of integer types corresponding to typedef
       names defined in other standard headers.
       ____________
       151. C++ implementations should  define  these  macros  only
           when __STDC_FORMAT_MACROS is defined before <inttypes.h>
           is included.
       [#2] Each instance of these macros shall be  replaced  by  a
       constant  expression  suitable  for use in #if preprocessing
       directives, and this expression shall have the same type  as
       would  an  expression that is an object of the corresponding
       type converted according to  the  integer  promotions.   Its
       implementation-defined value shall be equal to or greater in
       magnitude (absolute  value)  than  the  corresponding  value
       given below, with the same sign.
          - limits of ptrdiff_t
            PTRDIFF_MIN                       -65535
            PTRDIFF_MAX                       +65535
          - limits of sig_atomic_t
            SIG_ATOMIC_MIN                    see below
            SIG_ATOMIC_MAX                    see below
          - limit of size_t
            SIZE_MAX                           65535
          - limits of wchar_t
            WCHAR_MIN                         see below
            WCHAR_MAX                         see below
          - limits of wint_t
            WINT_MIN                          see below
            WINT_MAX                          see below
       [#3] If sig_atomic_t is defined as a  signed  integer  type,
       the  value  of  SIG_ATOMIC_MIN shall be no greater than -127
       and the value of SIG_ATOMIC_MAX shall be no less  than  127;
       otherwise,  sig_atomic_t  is  defined as an unsigned integer
       type, and the value of SIG_ATOMIC_MIN shall  be  0  and  the
       value of SIG_ATOMIC_MAX shall be no less than 255.
       [#4] If wchar_t is defined as a  signed  integer  type,  the
       value  of  WCHAR_MIN  shall  be no greater than -127 and the
       value of WCHAR_MAX shall be no  less  than  127;  otherwise,
       wchar_t  is  defined  as  an  unsigned integer type, and the
       value of WCHAR_MIN shall be 0 and  the  value  of  WCHAR_MAX
       shall be no less than 255.
       [#5] If wint_t is defined as  a  signed  integer  type,  the
       value  of  WINT_MIN  shall be no greater than -32767 and the
       value of WINT_MAX shall be no less  than  32767;  otherwise,
       wint_t is defined as an unsigned integer type, and the value
       of WINT_MIN shall be 0 and the value of WINT_MAX shall be no
       less than 65535.
*/
#if (!defined(__cplusplus)) || defined(__STDC_FORMAT_MACROS)
#define PTRDIFF_MIN			LONG_MIN
#define PTRDIFF_MAX			LONG_MAX
#define SIG_ATOMIC_MIN		INT_MIN
#define SIG_ATOMIC_MAX		INT_MAX
#if __dest_os == __win32_os || __MOTO__  || __dest_os == __wince_os
#define SIZE_MAX     		UINT_MAX
#else
#define SIZE_MAX     		ULONG_MAX
#endif
#ifndef __NO_WIDE_CHAR
#include <cwchar>   /* do define WCHAR_MIN and WCHAR_MAX */				
#define WINT_MIN			WCHAR_MIN
#define WINT_MAX			WCHAR_MAX
#endif 	 /* __NO_WIDE_CHAR */
#endif   /*(!defined(__cplusplus)) || defined(__STDC_CONSTANT_MACROS)*/
/*
7.4.6  Conversion functions for greatest-width integer types
7.4.6.1  The strtoimax function
Synopsis
       [#1]
               #include <inttypes.h>
               intmax_t strtoimax(const char * restrict nptr,
                       char ** restrict endptr, int base);
Description
       [#2] The strtoimax function is equivalent to strtol,  except
       that  the  initial  portion  of  the  string is converted to
       intmax_t representation.
Returns
       [#3] The strtoimax function returns the converted value,  if
       any.   If no conversion could be performed zero is returned.
       If the correct value is outside the range  of  representable
       values,  INTMAX_MAX  or INTMAX_MIN is returned (according to
       the sign of the value), and the value of the macro ERANGE is
       stored in errno.
*/
#ifdef __cplusplus
/*inline intmax_t strtoimax(const char * restrict nptr, char ** restrict endptr, int base)*/
#ifdef __MSL_LONGLONG_SUPPORT__												/* mm 981023 */
inline intmax_t strtoimax(const char * nptr, char ** endptr, int base)      /* mm 981012 */
           {return(strtoll(nptr, endptr, base));}							/* mm 981012 */
#else																		/* mm 981029 */
inline intmax_t strtoimax(const char * nptr, char ** endptr, int base)      /* mm 981029 */
           {return(strtol(nptr, endptr, base));}							/* mm 981029 */
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
#else
/*intmax_t strtoimax(const char * restrict nptr, char ** restrict endptr, int base);*/
intmax_t strtoimax(const char * nptr, char ** endptr, int base);

#ifdef __MSL_LONGLONG_SUPPORT__												/* mm 981023 */
#define strtoimax(nptr, endptr, base) strtoll(nptr, endptr, base)
#else																		/* mm 981029 */
#define strtoimax(nptr, endptr, base) strtol(nptr, endptr, base)			/* mm 981029 */
#endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/								/* mm 981023 */
#endif
/*
7.4.6.2  The strtoumax function
Synopsis
       [#1]
               #include <inttypes.h>
               uintmax_t strtoumax(const char * restrict nptr,
                       char ** restrict endptr, int base);
Description
       [#2] The strtoumax function is equivalent to strtoul, except
       that  the  initial  portion  of  the  string is converted to
       uintmax_t representation.
Returns
       [#3] The strtoumax function returns the converted value,  if
       any.   If no conversion could be performed zero is returned.
       If the correct value is outside the range  of  representable
       values,  UINTMAX_MAX is returned, and the value of the macro
       ERANGE is stored in errno.
*/
#ifdef __cplusplus
  /*inline uintmax_t strtoumax(const char * restrict nptr, char ** restrict endptr, int base)*/
  #ifdef __MSL_LONGLONG_SUPPORT__												/* mm 981029 */
    inline uintmax_t strtoumax(const char * nptr, char ** endptr, int base)
           {return(strtoull(nptr, endptr, base));}                     		/* mm 981012 */
  #else																		/* mm 981029 */
    inline uintmax_t strtoumax(const char * nptr, char ** endptr, int base)      /* mm 981029 */
           {return(strtoul(nptr, endptr, base));}							/* mm 981029 */
  #endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/								/* mm 981029 */
#else
  /*uintmax_t strtoumax(const char * restrict nptr, char ** restrict endptr, int base);*/
  uintmax_t strtoumax(const char * nptr, char ** endptr, int base);
  #ifdef __MSL_LONGLONG_SUPPORT__												/* mm 981023 */
    #define strtoumax(nptr, endptr, base) strtoull(nptr, endptr, base)
  #else																		/* mm 981029 */
    #define strtoumax(nptr, endptr, base) strtoul(nptr, endptr, base)			/* mm 981029 */
  #endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/								/* mm 981023 */
#endif
/*
7.4.6.3  The wcstoimax function
Synopsis
       [#1]
               #include <stddef.h>           // for wchar_t
               #include <inttypes.h>
               intmax_t wcstoimax(const wchar_t * restrict nptr,
                       wchar_t ** restrict endptr, int base);
Description
       [#2] The wcstoimax function is equivalent to wcstol,  except
       that  the initial portion of the wide string is converted to
       intmax_t representation.
Returns
       [#3] The wcstoimax function returns the converted value,  if
       any.   If no conversion could be performed zero is returned.
       If the correct value is outside the range  of  representable
       values,  INTMAX_MAX  or INTMAX_MIN is returned (according to
       the sign of the value), and the value of the macro ERANGE is
       stored in errno.
*/

#ifndef __NO_WIDE_CHAR
#ifdef __cplusplus
  /*inline intmax_t wcstoimax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)*/
  #ifdef __MSL_LONGLONG_SUPPORT__												/* mm 981023 */
    inline intmax_t wcstoimax(const wchar_t * nptr, wchar_t ** endptr, int base)/* mm 981012 */
           {return(wcstoll(nptr, endptr, base));}							/* mm 981012 */
  #else																		/* mm 981029 */
    inline intmax_t wcstoimax(const wchar_t * nptr, wchar_t ** endptr, int base)/* mm 981029 */
           {return(wcstol(nptr, endptr, base));}							/* mm 981029 */
  #endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
#else
  /*intmax_t wcstoimax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base);*/
  intmax_t wcstoimax(const wchar_t * nptr, wchar_t ** endptr, int base);

  #ifdef __MSL_LONGLONG_SUPPORT__												/* mm 981023 */
    #define wcstoimax(nptr, endptr, base) wcstoll(nptr, endptr, base)
  #else																		/* mm 981029 */
    #define wcstoimax(nptr, endptr, base) wcstol(nptr, endptr, base)			/* mm 981029 */
  #endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/								/* mm 981023 */
#endif
#endif  /*  __NO_WIDE_CHAR  */

/*
7.4.6.4  The wcstoumax function
Synopsis
       [#1]
               #include <stddef.h>           // for wchar_t
               #include <inttypes.h>
               uintmax_t wcstoumax(const wchar_t * restrict nptr,
                       wchar_t ** restrict endptr, int base);
Description
       [#2] The wcstoumax function is equivalent to wcstoul, except
       that  the initial portion of the wide string is converted to
       uintmax_t representation.
Returns
       [#3] The wcstoumax function returns the converted value,  if
       any.   If no conversion could be performed zero is returned.
       If the correct value is outside the range  of  representable
       values,  UINTMAX_MAX is returned, and the value of the macro
       ERANGE is stored in errno. */
       
#ifndef __NO_WIDE_CHAR
#ifdef __cplusplus
  /*inline uintmax_t wcstoumax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)*/
  #ifdef __MSL_LONGLONG_SUPPORT__													/* mm 981023 */
    inline uintmax_t wcstoumax(const wchar_t * nptr, wchar_t ** endptr, int base)   /* mm 981012 */
           {return(wcstoull(nptr, endptr, base));}								/* mm 981012 */
  #else																			/* mm 981029 */
    inline uintmax_t wcstoumax(const wchar_t * nptr, wchar_t ** endptr, int base)   /* mm 981029 */
           {return(wcstoul(nptr, endptr, base));}								/* mm 981029 */
  #endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/	/* mm 981023 */
#else
  /*uintmax_t wcstoumax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base);*/
  uintmax_t wcstoumax(const wchar_t * nptr, wchar_t ** endptr, int base);

  #ifdef __MSL_LONGLONG_SUPPORT__												/* mm 981023 */
    #define wcstoumax(nptr, endptr, base) wcstoull(nptr, endptr, base)
  #else																		/* mm 981029 */
    #define wcstoumax(nptr, endptr, base) wcstoul(nptr, endptr, base)			/* mm 981029 */
  #endif	/* #ifdef __MSL_LONGLONG_SUPPORT__	*/								/* mm 981023 */
#endif
#endif  /*  __NO_WIDE_CHAR  */

#ifdef __cplusplus
	}           										/* mm 981012 */
	#ifdef _MSL_USING_NAMESPACE
		}
	#endif
#endif

#endif   /* __cinttypes__ */

/*
 * Change record
 * mm 980720 Created.
 * mm 981012 Corrected some C++ syntax errors.
 * mm 981023 added wrappers round long long support
 * mm 981029 added non long long support for intmax, uintmax, strtoimax, strtoumax, wcstoimax, wcsoumax
 * vss 990729  add WCHAR wrappers
 */
