/*  Metrowerks Standard Library  */

/*  $Date: 1999/07/30 00:38:17 $
 *  $Revision: 1.13.4.2 $
 *  $NoKeywords: $
 *
 *		Copyright 1995-1999 Metrowerks, Inc.
 *		All rights reserved.
 */

/*
 *	cstdio       hh  971206  filename used to be stdio.h
 */

#ifndef __cstdio__
#define __cstdio__

#include <ansi_parms.h>
#include <eof.h>                                                      /* vss 980817 */
#include <null.h>
#include <size_t.h>
#include <va_list.h>
#ifndef __NO_WIDE_CHAR                                                /* mm 980204 */
#include <cwctype>                                                  /* hh 990507 */
#include <wchar_t.h>                                                  /* mm 990217 */
#endif                                                                /* mm 980204 */

#ifndef RC_INVOKED

#pragma options align = native
#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)
#pragma import on
#endif

#ifdef __cplusplus                                                    /*  hh  971206 */
#ifdef _MSL_USING_NAMESPACE
namespace std
{
#endif
extern "C"
{
#endif

enum __file_kinds
{
    __closed_file,
    __disk_file,
    __console_file,
    __string_file,
    __unavailable_file
};

enum __open_modes
{
    __must_exist,
    __create_if_necessary,
    __create_or_truncate
};

#ifndef __NO_WIDE_CHAR                                                /* mm 980204 */
enum __file_orientation                                               /* mm 980204 */
{
    __unoriented,
    __char_oriented,
    __wide_oriented
};
#endif /* not __NO_WIDE_CHAR */                                       /* mm 980204 */

enum __io_modes
{
    __read = 1,
    __write = 2,
    __read_write = 3,
    __append = 4
};

typedef struct
{
    unsigned int open_mode   : 2;
    unsigned int io_mode     : 3;
    unsigned int buffer_mode : 2;
    unsigned int file_kind   : 3;                                     /* mm 980708 */
#ifndef __NO_WIDE_CHAR                                                /* mm 980204 */
    unsigned int file_orientation : 2;
#endif /* not __NO_WIDE_CHAR */                                       /* mm 980204 */
    unsigned int binary_io : 1;
} __file_modes;

enum __io_states
{
    __neutral,
    __writing,
    __reading,
    __rereading
};

typedef struct
{
    unsigned int  io_state    : 3;
    unsigned int  free_buffer : 1;
    unsigned char eof;
    unsigned char error;
} __file_state;

typedef unsigned long __file_handle;

#if __dest_os == __be_os                                              /* mm 970708 */
typedef long long fpos_t; /* we have 64 bit file sizes & positions */ /* mm 970708 */
#else                                                                 /* mm 970708 */
typedef unsigned long fpos_t;
#endif                                                                /* mm 970708 */

typedef struct _FILE FILE;

enum __io_results
{
    __no_io_error,
    __io_error,
    __io_EOF                                                          /* mm 961031 */
};

typedef void (*__idle_proc) (void);
typedef int  (*__pos_proc) (__file_handle file,
                           fpos_t*       position,
                           int           mode,
                           __idle_proc   idle_proc);                   /* mm 970708 */
typedef int  (*__io_proc) (__file_handle  file,
                          unsigned char* buff,
                          size_t*        count,
                          __idle_proc    idle_proc);
typedef int  (*__close_proc) (__file_handle file);

#define __ungetc_buffer_size 2

struct _FILE
{
    __file_handle handle;
    __file_modes  mode;
    __file_state  state;
#ifndef _No_Disk_File_OS_Support                                      /* mm 981007 */
    unsigned char is_dynamically_allocated;                           /* mm 981007 */
#endif /* not _No_Disk_File_OS_Support */                             /* mm 981007 */
    unsigned char char_buffer;
    unsigned char char_buffer_overflow;
    unsigned char ungetc_buffer[__ungetc_buffer_size];
#ifndef __NO_WIDE_CHAR                                                /* mm 980204 */
    wchar_t ungetwc_buffer[__ungetc_buffer_size];
#endif /* not __NO_WIDE_CHAR */                                       /* mm 980204 */
#if __MIPS__
    /*	Watch out.  sizeof(long) could be 64, but size(size_t) is always
        32.  See buff_io.c where buf_len is 'converted' to a size_t
     */
    unsigned int   position;
    unsigned char* buffer;
    unsigned int   buffer_size;
    unsigned char* buffer_ptr;
    unsigned int   buffer_len;
    unsigned int   buffer_alignment;
    unsigned int   saved_buffer_len;
    unsigned int   buffer_pos;
#else
    unsigned long  position;
    unsigned char* buffer;
    unsigned long  buffer_size;
    unsigned char* buffer_ptr;
    unsigned long  buffer_len;
    unsigned long  buffer_alignment;
    unsigned long  saved_buffer_len;
    unsigned long  buffer_pos;
#endif
    __pos_proc   position_proc;
    __io_proc    read_proc;
    __io_proc    write_proc;
    __close_proc close_proc;
    __idle_proc  idle_proc;
#ifndef _No_Disk_File_OS_Support                     /* mm 981007 */
    struct _FILE* next_file_struct;                  /* mm 981007 */
#endif /* not _No_Disk_File_OS_Support */            /* mm 981007 */
};

#if defined(_No_Disk_File_OS_Support) && (defined(_No_Console) || defined(_Unbuffered_Console))
#define _Unbuffered_IO
#endif

#define _IONBF 0
#define _IOLBF 1
#define _IOFBF 2

#define BUFSIZ 4096
/* #define EOF				 -1		*/               /*  vss 980817  */

#ifdef _No_Disk_File_OS_Support
#define _STATIC_FILES 3                              /* mm 981007 */
#ifdef _No_Console
#define FOPEN_MAX 0
#else
#define FOPEN_MAX 3
#endif
#else
#define FOPEN_MAX     35
#define _STATIC_FILES 4                              /* mm 981007 */
#endif

#define FILENAME_MAX 256

#if __dest_os == __mac_os
#define L_tmpnam 32
#else
#define L_tmpnam 512
#endif

#define TMP_MAX  32767

#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2

#if __dest_os == __be_os

#define L_ctermid  32
#define L_cuserid  32
#define STREAM_MAX FOPEN_MAX

FILE* popen (const char* cmd, const char* type);     /* mm 970708 */
int   pclose (FILE* fp);                             /* mm 970708 */

#endif                                               /* __be_os */

#define stdin  (&__std (__files[0])) /* mm 961031 */ /*MW-mm 961203, hh 990520 */
#define stdout (&__std (__files[1])) /* mm 961031 */ /*MW-mm 961203, hh 990520 */
#define stderr (&__std (__files[2])) /* mm 961031 */ /*MW-mm 961203, hh 990520 */
/* rjk 980313 add the _MSL_DLLDATA macro */
extern _MSL_DLLDATA FILE __files[]; /* mm 961031 */   /*MW-mm 961203 */

#ifndef _No_Disk_File_OS_Support

int remove (const char* name);
int rename (const char* old_name, const char* new_name);

char* tmpnam (char* name);
FILE* tmpfile (void);

#endif                                                /* ndef _No_Disk_File_OS_Support */

void setbuf (FILE* file, char* buff);
int  setvbuf (FILE* file, char* buff, int mode, size_t size);

#if __dest_os == __be_os                              /* mm 970708 */
int setbuffer (FILE* stream, char* buf, size_t size); /* mm 970708 */
int setlinebuf (FILE* stream);                        /* mm 970708 */
#endif                                                /* mm 970708 */

int fclose (FILE* file);
int fflush (FILE* file);

#ifndef _No_Disk_File_OS_Support

FILE* fopen (const char* name, const char* mode);
FILE* freopen (const char* name, const char* mode, FILE* file);

#endif                                                /* ndef _No_Disk_File_OS_Support */

#if __dest_os == __be_os

FILE* fdopen (int fd, const char* type);
int   fileno (FILE* fd);

#endif

#ifndef __NO_WIDE_CHAR                                /* mm 980204 */
int fwide (FILE*, int);                               /* mm 980825 */
#endif /* __NO_WIDE_CHAR */                           /* mm 980204 */

void setbuf (FILE* file, char* buff);
int  setvbuf (FILE* file, char* buff, int mode, size_t size);

int fprintf (FILE* file, const char* format, ...);
int fscanf (FILE* file, const char* format, ...);

#if __dest_os == __n64_os                             /* ad 1.28.99 */
extern void printf (const char* format, ...);
#else
int printf (const char* format, ...);
#endif
int scanf (const char* format, ...);

int sprintf (char* s, const char* format, ...);
int snprintf (char* s, size_t n, const char* format, ...);

int sscanf (const char* s, const char* format, ...);
#if __INTEL__ || __MIPS__
int swprintf (wchar_t*       s,
              size_t         n,
              const wchar_t* format,
              ...);                                   /* 980226 JCM added size_t to prototype */
#endif

int __vfscanf (FILE* file, const char* format, va_list arg);
int __vsscanf (const char* s, const char* format, va_list arg);

int vfprintf (FILE* file, const char* format, va_list arg);
int vprintf (const char* format, va_list arg);
int vsprintf (char* s, const char* format, va_list arg);
int vsnprintf (char* s, size_t n, const char* format, va_list arg);

int   fgetc (FILE* file);
char* fgets (char* s, int n, FILE* file);

int fputc (int c, FILE* file);
int fputs (const char* s, FILE* file);

char* gets (char* s);

int puts (const char* s);

int ungetc (int c, FILE* file);

size_t fread (void* ptr, size_t memb_size, size_t num_memb, FILE* file);
size_t fwrite (const void* ptr, size_t memb_size, size_t num_memb, FILE* file);

int    fgetpos (FILE* file, fpos_t* pos);
long   ftell (FILE* file);
fpos_t _ftell (FILE*);                                /* mm 970708 */

int fsetpos (FILE* file, const fpos_t* pos);
int fseek (FILE* file, long offset, int mode);
int _fseek (FILE*, fpos_t, int);                      /* mm 970708 */

void rewind (FILE* file);

void clearerr (FILE* file);

void perror (const char* s);

int __get_char (FILE* file);
int __put_char (int c, FILE* file);

/* The following section inserted  mm 990325 */
typedef struct
{
    char*  CharStr;
    size_t MaxCharCount;
    size_t CharsWritten;
} __OutStrCtrl;

typedef struct
{
    char* NextChar;
    int   NullCharDetected;
} __InStrCtrl;

void* __FileWrite (void*, const char*, size_t);
void* __StringWrite (void*, const char*, size_t);
int   __FileRead (void*, int, int);
int   __StringRead (void*, int, int);

enum __ReadProcActions
{
    __GetAChar,
    __UngetAChar,
    __TestForError
};

#ifndef __NO_WIDE_CHAR

typedef struct
{
    wchar_t* wCharStr;
    size_t   MaxCharCount;
    size_t   CharsWritten;
} __wOutStrCtrl;

typedef struct
{
    wchar_t* wNextChar;
    int      wNullCharDetected;
} __wInStrCtrl;

void*  __wFileWrite (void*, const wchar_t*, size_t);
void*  __wStringWrite (void*, const wchar_t*, size_t);
wint_t __wFileRead (void*, wint_t, int);
wint_t __wStringRead (void*, wint_t, int);

enum __WReadProcActions
{
    __GetAwChar,
    __UngetAwChar,
    __TestForwcsError
};
#endif /* #ifndef __NO_WIDE_CHAR */

/* End of section inserted  mm 990325 */

FILE* __handle_open (__file_handle handle, const char* mode);
FILE* __handle_reopen (__file_handle handle, const char* mode, FILE* file);

void __set_idle_proc (FILE* file, __idle_proc idle_proc);

#if (__dest_os == __win32_os || __dest_os == __wince_os)
/*
 * I'm putting this declaration here because it is in Visual C++'s stdio.h
 * I copied this declaration from unix.win32.h. They should match.
 */
FILE* fdopen (int fildes, char* type);
/*
 * defines added for compatibility with older MS C code
 */
#define _vsnprintf vsnprintf
#define _snprintf  snprintf
#endif

#ifdef __cplusplus
} /* extern "C" */

inline int
getc (FILE* file)

#ifndef __NO_WIDE_CHAR                                      /* mm 980204 */
{
    return (fwide (file, -1) >= 0)
               ? EOF
               : (file->buffer_len-- ? *file->buffer_ptr++ : __get_char (file));
}
#else

{
    return file->buffer_len-- ? *file->buffer_ptr++ : __get_char (file);
}

#endif /* __NO_WIDE_CHAR */                                 /* mm 980204 */

inline int
putc (int c, FILE* file)

#ifndef __NO_WIDE_CHAR                                      /* mm 980204 */
{
    return (fwide (file, -1) >= 0) ? EOF :                  /* vss 990129 */
               (file->buffer_len-- ? (*file->buffer_ptr++ = (unsigned char)c)
                                   : __put_char (c, file));
}

#else

{
    return file->buffer_len-- ? (*file->buffer_ptr++ = (unsigned char)c) : __put_char (c, file);
} /* mm 990202 */

#endif /* __NO_WIDE_CHAR */                                 /* mm 980204 */

inline int
getchar ()
{
    return getc (stdin);
}

inline int
putchar (int c)
{
    return putc (c, stdout);
}

inline int
feof (FILE* file)
{
    return file->state.eof;
}

inline int
ferror (FILE* file)
{
    return file->state.error;
}

#else

int getc (FILE* file);
int putc (int c, FILE* file);

#ifndef __NO_WIDE_CHAR                                      /* mm 980204 */
#define getc(file)                                                                             \
    ((fwide (file, -1) >= 0) ? EOF                                                             \
     : (file)->buffer_len--  ? (int)*(file)->buffer_ptr++                                      \
                             : __std (__get_char) (file))
#else                                                       /* mm 980204 */
#define getc(file)                                                                             \
    ((file)->buffer_len-- ? (int)*(file)->buffer_ptr++ : __std (__get_char) (file))
#endif /* __NO_WIDE_CHAR */                                 /* mm 980204 */

#ifndef __NO_WIDE_CHAR                                      /* mm 980204 */
#define putc(c, file)                                                                          \
    ((fwide (file, -1) >= 0) ? EOF                                                             \
     : (file)->buffer_len--  ? (int)(*(file)->buffer_ptr++ = (unsigned char)c)                 \
                             : __std (__put_char) (c, file)) /* mm 990202 */
#else                                                       /* mm 980204 */
#define putc(c, file)
((file)->buffer_len-- ? (int) (*(file)->buffer_ptr++ = (unsigned char)c) : __std(__put_char)(c, file)) /* mm 990202 */
#endif /* __NO_WIDE_CHAR */                                 /* mm 980204 */

int getchar (void);
int putchar (int c);

#define getchar()    __std (getc) (stdin)
#define putchar(c)   __std (putc) (c, stdout)

int feof (FILE* file);
int ferror (FILE* file);

#define feof(file)   ((file)->state.eof)
#define ferror(file) ((file)->state.error)

#endif

/* #endif  hh 980121 There should not be C++ versions of the C libs */

#ifdef __cplusplus /*  hh  971206 */
#ifdef _MSL_USING_NAMESPACE
}
#endif
#endif

#if __dest_os == __wince_os
enum
{
    stdio_tofiles,
    stdio_tocom,
    stdio_custom
}; /* mf-- allows CE users to
/* customize their io-- the default is to/from files */
#endif

#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)
#pragma import reset
#endif
#pragma options align = reset

#endif /* RC_INVOKED */

#endif /* __cstdio__ */

/*     Change record
 * mm  961031  Changes for Pascal
 * mm  961203  Changed files to __files
 * mm  970708  Inserted Be changes
 * SM  970709  Added conditional support for embedded targets via the
               __no_os, _No_Console, and _Unbuffered_Console macros.
 * MA  970720  Changed __no_os to _No_Disk_File_OS_Support.
 * hh  971206 Changed file name from stdio.h to cstdio and added namespace support
 * hh  971230 added RC_INVOKED wrapper
 * hh  980121 added <cstddef> for wchar_t
 * mm  980204  added fields in file structure for wide characters.
 * blc 980301 added vsnprintf, snprintf from C9X draft
 * rjk 980313 add DLLDATA for exporting data in dll
 * hh  980627 changed include from wctype.h to cwctype
 * mm  980708 Corrected space allotment for the values of __file_kinds in __file_modes
 * vss 980817 Define EOF in its own file and include it here to avoid circular dep
 * mm  980825 Removed variable names from prototype for fwide to avoid problems with PH tests
 * mm  981007 Changes for dynamic allocation of file structures.
 * ad 1.28.99 take out the printf() prototype for nintendo
 * vss 990129 Get rid of warning message by casting to uchar
 * mm  990202 Made similar changes as in vss 990129 in three other places
 * mm  990217 Deleted #include cstddef as not needed and replaced by #include <wchar_t.h>
 *  mm 990325	Changes to permit separation of string format i/o functions from file i/o
 * hh 990507 Changed #include <wctype.h> to <cwctype>
 * hh 990520 fixed up the stdout, etc. macros to be namespace aware
 */
